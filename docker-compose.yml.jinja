#version: '3'

networks:
  {{network_name}}:
    driver: bridge

services:
  #--- OpenWebUI  ---
  {{webui_service_name}}:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    environment:
      - OLLAMA_API_BASE_URL=http://host.docker.internal:11434/api
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
    volumes:
      - ${DATA_DIR-./data}/open-webui:/app/backend/data
    {% if webui_port %}
    ports:
      - ${WEBUI_PORT-3000}:8080
    {% endif %}
    networks:
      - {{network_name}}
    extra_hosts:
      - "host.docker.internal:host-gateway"
  #--- Caddy ---
  {{caddy_service_name}}:
    build:
      context: ./images/caddy
      dockerfile: ./Dockerfile
    restart: unless-stopped
    depends_on:
      - {{webui_service_name}}
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - API_SUBDOMAIN=${API_SUBDOMAIN}
      - APP_SUBDOMAIN=${APP_SUBDOMAIN}
      - OLLAMA_URL=${OLLAMA_URL}
      - OLLAMA_API_KEY=${OLLAMA_API_KEY}
      - WEBUI_SERVICE_NAME=${WEBUI_SERVICE_NAME}
    volumes:
      - ./conf/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./conf/caddy/401.json:/srv/401.json
      - ${DATA_DIR-./data}/caddy:/data/caddy
    {% if publish_locally %}
    ports:
      - "443:443"
    {% endif %}
    networks:
      - {{network_name}}
    extra_hosts:
      - "host.docker.internal:host-gateway"
  #--- Cloudflared ---
  {{cloudflared_service_name}}:
    image: cloudflare/cloudflared
    restart: unless-stopped
    depends_on:
      - {{caddy_service_name}}
    volumes:
      - ./conf/cloudflared/config.yaml:/etc/cloudflared/config.yml
      - ${DATA_DIR-./data}/cloudflared/credentials.json:/etc/cloudflared/credentials.json
    command: tunnel --config /etc/cloudflared/config.yml run #--loglevel debug run
    networks:
      - {{network_name}}








volumes:
  n8n_storage:
  postgres_storage:
  qdrant_storage:
  flowise:

networks:
  {{network_name}}:
    driver: ipvlan
    driver_opts:
      parent: enX0 # the interface on your docker host that it will tunnel through
      ipvlan_mode: l3 # Layer 3 mode
    ipam:
      config:
        - subnet: 192.168.22.0/24 # your networks subnet
        - subnet: 192.168.23.0/24 # your networks subnet
    name: {{network_name}}
services:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres


services:
  {{webui_service_name}} flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ${DATA_DIR-./data}/flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  postgres:
    image: postgres:16-alpine
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - ${DATA_DIR-./data}/postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ${DATA_DIR-./data}/n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ${DATA_DIR-./data}/n8n/backup:/backup
      - ${DATA_DIR-./data}/shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - ${DATA_DIR-./data}/qdrant_storage:/qdrant/storage

